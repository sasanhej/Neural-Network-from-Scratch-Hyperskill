type: edu
files:
- name: student.py
  visible: true
  text: |
    import math

    import numpy as np
    import pandas as pd
    import os
    import requests
    from matplotlib import pyplot as plt
    import math


    # scroll to the bottom to start coding your solution
    def scale(X_train, X_test):
        maximus = (np.concatenate((X_train, X_test), axis=0).max(axis=0))
        X_train_scaled = X_train / maximus
        X_test_scaled = X_test / maximus
        return X_train_scaled, X_test_scaled


    def xavier(n_in, n_out):
        n = n_in*n_out
        d = math.sqrt(n)/math.sqrt(n_in+n_out)
        u = np.random.uniform(-d, d, n).reshape(n_in, n_out)
        return u


    def sigmoid(y):
        return [1/(1+math.e**(-x)) for x in y]


    def one_hot(data: np.ndarray) -> np.ndarray:
        y_train = np.zeros((data.size, data.max() + 1))
        rows = np.arange(data.size)
        y_train[rows, data] = 1
        return y_train


    def plot(loss_history: list, accuracy_history: list, filename='plot'):

        # function to visualize learning process at stage 4

        n_epochs = len(loss_history)

        plt.figure(figsize=(20, 10))
        plt.subplot(1, 2, 1)
        plt.plot(loss_history)

        plt.xlabel('Epoch number')
        plt.ylabel('Loss')
        plt.xticks(np.arange(0, n_epochs, 4))
        plt.title('Loss on train dataframe from epoch')
        plt.grid()

        plt.subplot(1, 2, 2)
        plt.plot(accuracy_history)

        plt.xlabel('Epoch number')
        plt.ylabel('Accuracy')
        plt.xticks(np.arange(0, n_epochs, 4))
        plt.title('Accuracy on test dataframe from epoch')
        plt.grid()

        plt.savefig(f'{filename}.png')


    if __name__ == '__main__':

        if not os.path.exists('../Data'):
            os.mkdir('../Data')

        # Download data if it is unavailable.
        if ('fashion-mnist_train.csv' not in os.listdir('../Data') and
                'fashion-mnist_test.csv' not in os.listdir('../Data')):
            print('Train dataset loading.')
            url = "https://www.dropbox.com/s/5vg67ndkth17mvc/fashion-mnist_train.csv?dl=1"
            r = requests.get(url, allow_redirects=True)
            open('../Data/fashion-mnist_train.csv', 'wb').write(r.content)
            print('Loaded.')

            print('Test dataset loading.')
            url = "https://www.dropbox.com/s/9bj5a14unl5os6a/fashion-mnist_test.csv?dl=1"
            r = requests.get(url, allow_redirects=True)
            open('../Data/fashion-mnist_test.csv', 'wb').write(r.content)
            print('Loaded.')

        # Read train, test data.
        raw_train = pd.read_csv('../Data/fashion-mnist_train.csv')
        raw_test = pd.read_csv('../Data/fashion-mnist_test.csv')

        X_train = raw_train[raw_train.columns[1:]].values
        X_test = raw_test[raw_test.columns[1:]].values

        y_train = one_hot(raw_train['label'].values)
        y_test = one_hot(raw_test['label'].values)

        # write your code here
        a, b = scale(X_train, X_test)
        #print([a[2, 778], b[0, 774]], end=" ")
        print([a[2, 778], b[0, 774]], end=" ")
        print(xavier(2, 3).flatten().tolist(), end=" ")
        c = [-1, 0, 1, 2]
        print(sigmoid(c))
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import StageTest, TestCase, CheckResult
    from hstest.stage_test import List
    from utils.utils import get_list, full_check, custom_uniform

    import numpy as np
    np.random.uniform = custom_uniform

    # The source data I will test on

    true_forward_res = [0.42286725173173645, 0.7863175754895447, 0.8539526054946633, 0.5878649450449149,
                        0.25332037818521813, 0.10846218815633141, 0.16132366288535735, 0.5036812915517839,
                        0.39649108111105275, 0.3378884293704015, 0.418550728613325, 0.7054997389006183,
                        0.7505531230813576, 0.5719368355036792, 0.14896990554768216, 0.2714895260027178,
                        0.36007653088357094, 0.5919441786952234, 0.6768202587658813, 0.5221310346087061]


    class Tests2(StageTest):

        def generate(self) -> List[TestCase]:
            return [TestCase(time_limit=1000000)]

        def check(self, reply: str, attach):
            reply = reply.strip().lower()

            if len(reply) == 0:
                return CheckResult.wrong("No output was printed")

            if reply.count('[') != 1 or reply.count(']') != 1:
                return CheckResult.wrong('No expected lists were found in output')

            try:
                forward_res, _ = get_list(reply)
            except Exception:
                return CheckResult.wrong('Seems that feedforward output is in wrong format')

            check_result = full_check(forward_res, true_forward_res, 'feedforward')
            if check_result:
                return check_result

            return CheckResult.correct()


    if __name__ == '__main__':
        Tests2().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import Tests2

    if __name__ == '__main__':
        Tests2().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/250/stages/1255/implement#comment
status: Solved
record: 1
